# -*- coding: utf-8 -*-
"""euclidean.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DB_v3SJhoGQKYMRvXOdp79R84mt2QSwX
"""

import math
import pandas as pd
class Euclidean:
    def __init__(self, df, columns, classes):
        self.columns = columns
        self.classes = classes

        self.centroid_1 = []
        self.centroid_2 = []

        for i in range(len(self.columns)-1):
            self.centroid_1.append(df.loc[df[columns[-1]]==self.classes[0],columns[i]].mean())
            self.centroid_2.append(df.loc[df[columns[-1]]==self.classes[1],columns[i]].mean())

    def test(self, test, ir):
        # se crea un dataframe para darle mejor explicabilidad al resultado de la prueba
        columns = ['Patr√≥n', 'Distancia al centroide_0', 'Distancia al centroide_1',
                'Clase asignada', 'Resultado']
        df = pd.DataFrame(columns=columns)
        for index, row in test.iterrows():
            sum1 = 0
            sum2 = 0
            for i in range(len(self.columns)-1):
                sum1 = sum1 + math.pow((row[self.columns[i]]-self.centroid_1[i]),2)
                sum2 = sum2 + math.pow((row[self.columns[i]]-self.centroid_2[i]),2)
            c1distance = math.sqrt(sum1)
            c2distance = math.sqrt(sum2)
            assagined_class = self.classes[0] if c1distance < c2distance else self.classes[1]
            result = 'Acierto' if assagined_class == row[-1] else 'Error'
            new_row = {columns[0]: row.name, columns[1]: c1distance, columns[2]: c2distance,
                    columns[3]: assagined_class, columns[4]:result}
            df.loc[len(df)] = new_row

        correct = len(df[df[columns[4]]=='Acierto'])
        total = len(df)
        if ir <= 1.5:
            accuracy = round(correct / total, 2)
            er = 1 - accuracy
            print(f'Acurracy = {correct}/{total} = {accuracy} = {accuracy*100}%')
            print(f'Error rate = 1 - {accuracy} = {er} = {er*100}%')
        else:
            print(f'{correct} aciertos de {total}')
        return df

